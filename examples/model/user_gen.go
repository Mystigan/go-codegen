// Code generated by go-codegen, DO NOT EDIT.
package model

import (
	examples "github.com/alextanhongpin/go-codegen/examples"
	uuid "github.com/google/uuid"
	"net"
	"time"
)

type User struct {
	allowPasswordChange    bool
	birthdate              time.Time
	confirmationSentAt     time.Time
	confirmationToken      string
	confirmedAt            time.Time
	country                string
	createdAt              time.Time
	currentSignInAt        time.Time
	currentSignInIp        net.IP
	currentSignInUserAgent string
	deletedAt              time.Time
	email                  string
	emailVerified          bool
	familyName             examples.FamilyName
	gender                 string
	givenName              string
	id                     uuid.UUID
	lastSignInAt           time.Time
	lastSignInIp           net.IP
	lastSignInUserAgent    string
	lastSignOutAt          time.Time
	lastSignOutIp          net.IP
	lastSignOutUserAgent   string
	locale                 string
	locality               string
	middleName             string
	name                   string
	nickname               string
	phoneNumber            string
	phoneNumberVerified    bool
	picture                string
	postalCode             string
	preferredUsername      string
	profile                string
	region                 string
	resetPasswordSentAt    time.Time
	resetPasswordToken     string
	signInCount            int32
	streetAddress          string
	tags                   []string
	unconfirmedEmail       string
	updatedAt              time.Time
	website                string
	zoneinfo               string
}

func (u User) AllowPasswordChange() bool {
	return u.allowPasswordChange
}

func (u User) Birthdate() time.Time {
	return u.birthdate
}

func (u User) ConfirmationSentAt() time.Time {
	return u.confirmationSentAt
}

func (u User) ConfirmationToken() string {
	return u.confirmationToken
}

func (u User) ConfirmedAt() time.Time {
	return u.confirmedAt
}

func (u User) Country() string {
	return u.country
}

func (u User) CreatedAt() time.Time {
	return u.createdAt
}

func (u User) CurrentSignInAt() time.Time {
	return u.currentSignInAt
}

func (u User) CurrentSignInIp() net.IP {
	return u.currentSignInIp
}

func (u User) CurrentSignInUserAgent() string {
	return u.currentSignInUserAgent
}

func (u User) DeletedAt() time.Time {
	return u.deletedAt
}

func (u User) Email() string {
	return u.email
}

func (u User) EmailVerified() bool {
	return u.emailVerified
}

func (u User) FamilyName() examples.FamilyName {
	return u.familyName
}

func (u User) Gender() string {
	return u.gender
}

func (u User) GivenName() string {
	return u.givenName
}

func (u User) ID() uuid.UUID {
	return u.id
}

func (u User) LastSignInAt() time.Time {
	return u.lastSignInAt
}

func (u User) LastSignInIp() net.IP {
	return u.lastSignInIp
}

func (u User) LastSignInUserAgent() string {
	return u.lastSignInUserAgent
}

func (u User) LastSignOutAt() time.Time {
	return u.lastSignOutAt
}

func (u User) LastSignOutIp() net.IP {
	return u.lastSignOutIp
}

func (u User) LastSignOutUserAgent() string {
	return u.lastSignOutUserAgent
}

func (u User) Locale() string {
	return u.locale
}

func (u User) Locality() string {
	return u.locality
}

func (u User) MiddleName() string {
	return u.middleName
}

func (u User) Name() string {
	return u.name
}

func (u User) Nickname() string {
	return u.nickname
}

func (u User) PhoneNumber() string {
	return u.phoneNumber
}

func (u User) PhoneNumberVerified() bool {
	return u.phoneNumberVerified
}

func (u User) Picture() string {
	return u.picture
}

func (u User) PostalCode() string {
	return u.postalCode
}

func (u User) PreferredUsername() string {
	return u.preferredUsername
}

func (u User) Profile() string {
	return u.profile
}

func (u User) Region() string {
	return u.region
}

func (u User) ResetPasswordSentAt() time.Time {
	return u.resetPasswordSentAt
}

func (u User) ResetPasswordToken() string {
	return u.resetPasswordToken
}

func (u User) SignInCount() int32 {
	return u.signInCount
}

func (u User) StreetAddress() string {
	return u.streetAddress
}

func (u User) Tags() []string {
	return u.tags
}

func (u User) UnconfirmedEmail() string {
	return u.unconfirmedEmail
}

func (u User) UpdatedAt() time.Time {
	return u.updatedAt
}

func (u User) Website() string {
	return u.website
}

func (u User) Zoneinfo() string {
	return u.zoneinfo
}

type userValidator interface {
	Validate(user *User) error
}
type UserBuilder struct {
	user *User
}

func (ub *UserBuilder) Build(v userValidator) (*User, error) {
	if err := v.Validate(ub.user); err != nil {
		return nil, err
	}
	u := ub.user
	ub.user = nil
	return u, nil
}

type UserBuilderOption func(u *UserBuilder) error

func NewUserBuilder(opts ...UserBuilderOption) (*UserBuilder, error) {
	ub := UserBuilder{user: new(User)}
	for _, o := range opts {
		if err := o(&ub); err != nil {
			return nil, err
		}
	}
	return &ub, nil
}
func WithUserAllowPasswordChange(allowPasswordChange bool) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.allowPasswordChange = allowPasswordChange
		return nil
	}
}
func WithUserBirthdate(birthdate time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.birthdate = birthdate
		return nil
	}
}
func WithUserConfirmationSentAt(confirmationSentAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.confirmationSentAt = confirmationSentAt
		return nil
	}
}
func WithUserConfirmationToken(confirmationToken string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.confirmationToken = confirmationToken
		return nil
	}
}
func WithUserConfirmedAt(confirmedAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.confirmedAt = confirmedAt
		return nil
	}
}
func WithUserCountry(country string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.country = country
		return nil
	}
}
func WithUserCreatedAt(createdAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.createdAt = createdAt
		return nil
	}
}
func WithUserCurrentSignInAt(currentSignInAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.currentSignInAt = currentSignInAt
		return nil
	}
}
func WithUserCurrentSignInIp(currentSignInIp net.IP) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.currentSignInIp = currentSignInIp
		return nil
	}
}
func WithUserCurrentSignInUserAgent(currentSignInUserAgent string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.currentSignInUserAgent = currentSignInUserAgent
		return nil
	}
}
func WithUserDeletedAt(deletedAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.deletedAt = deletedAt
		return nil
	}
}
func WithUserEmail(email string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.email = email
		return nil
	}
}
func WithUserEmailVerified(emailVerified bool) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.emailVerified = emailVerified
		return nil
	}
}
func WithUserFamilyName(familyName examples.FamilyName) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.familyName = familyName
		return nil
	}
}
func WithUserGender(gender string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.gender = gender
		return nil
	}
}
func WithUserGivenName(givenName string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.givenName = givenName
		return nil
	}
}
func WithUserID(id uuid.UUID) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.id = id
		return nil
	}
}
func WithUserLastSignInAt(lastSignInAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.lastSignInAt = lastSignInAt
		return nil
	}
}
func WithUserLastSignInIp(lastSignInIp net.IP) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.lastSignInIp = lastSignInIp
		return nil
	}
}
func WithUserLastSignInUserAgent(lastSignInUserAgent string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.lastSignInUserAgent = lastSignInUserAgent
		return nil
	}
}
func WithUserLastSignOutAt(lastSignOutAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.lastSignOutAt = lastSignOutAt
		return nil
	}
}
func WithUserLastSignOutIp(lastSignOutIp net.IP) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.lastSignOutIp = lastSignOutIp
		return nil
	}
}
func WithUserLastSignOutUserAgent(lastSignOutUserAgent string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.lastSignOutUserAgent = lastSignOutUserAgent
		return nil
	}
}
func WithUserLocale(locale string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.locale = locale
		return nil
	}
}
func WithUserLocality(locality string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.locality = locality
		return nil
	}
}
func WithUserMiddleName(middleName string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.middleName = middleName
		return nil
	}
}
func WithUserName(name string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.name = name
		return nil
	}
}
func WithUserNickname(nickname string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.nickname = nickname
		return nil
	}
}
func WithUserPhoneNumber(phoneNumber string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.phoneNumber = phoneNumber
		return nil
	}
}
func WithUserPhoneNumberVerified(phoneNumberVerified bool) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.phoneNumberVerified = phoneNumberVerified
		return nil
	}
}
func WithUserPicture(picture string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.picture = picture
		return nil
	}
}
func WithUserPostalCode(postalCode string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.postalCode = postalCode
		return nil
	}
}
func WithUserPreferredUsername(preferredUsername string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.preferredUsername = preferredUsername
		return nil
	}
}
func WithUserProfile(profile string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.profile = profile
		return nil
	}
}
func WithUserRegion(region string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.region = region
		return nil
	}
}
func WithUserResetPasswordSentAt(resetPasswordSentAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.resetPasswordSentAt = resetPasswordSentAt
		return nil
	}
}
func WithUserResetPasswordToken(resetPasswordToken string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.resetPasswordToken = resetPasswordToken
		return nil
	}
}
func WithUserSignInCount(signInCount int32) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.signInCount = signInCount
		return nil
	}
}
func WithUserStreetAddress(streetAddress string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.streetAddress = streetAddress
		return nil
	}
}
func WithUserTags(tags []string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.tags = tags
		return nil
	}
}
func WithUserUnconfirmedEmail(unconfirmedEmail string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.unconfirmedEmail = unconfirmedEmail
		return nil
	}
}
func WithUserUpdatedAt(updatedAt time.Time) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.updatedAt = updatedAt
		return nil
	}
}
func WithUserWebsite(website string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.website = website
		return nil
	}
}
func WithUserZoneinfo(zoneinfo string) UserBuilderOption {
	return func(u *UserBuilder) error {
		u.user.zoneinfo = zoneinfo
		return nil
	}
}
